#include <stdint.h>
#include "Arduino.h"
#include "mcp_can.h"
#include "SPI.h"

const int SPI_CS_PIN = 9;
MCP_CAN CAN(SPI_CS_PIN);

typedef struct zoe_can_packet
{
    uint8_t payload[8];
    uint32_t can_id;
    uint32_t frequency;
    bool active;
} zoe_can_packet;

zoe_can_packet zoeCluster[] = {
    {{127, 192, 127, 235, 128, 34, 188, 248},
     198,
     31,
     false},
    {{186, 127, 255, 127, 48, 255, 255, 0},
     302,
     61,
     false},
    {{0, 104, 111, 254, 0, 159, 254, 141},
     304,
     15,
     false},
    {{255, 255, 255, 187, 0, 240, 48, 41},
     378,
     20,
     false},
    {{255, 255, 255, 0, 255, 64, 112, 255},
     382,
     47,
     false},
    {{193, 112, 47, 114, 247, 5, 160},
     390,
     27,
     false},
    {{255, 240, 14, 198, 146, 0},
     394,
     28,
     false},
    {{222, 32, 0, 43, 0, 255, 255, 255},
     502,
     61,
     false},
    {{135, 4, 215, 191, 254, 77, 102, 45},
     504,
     18,
     false},
    {{12, 64, 7, 255, 127, 200, 69, 0},
     509,
     503,
     false},
    {{254, 29, 192, 106, 255, 255}, // Fahrzeug prüfen
     530,
     50,
     true},
    {{156},
     536,
     954,
     false},
    {{0, 0, 255, 239, 254, 0, 12},
     578,
     151,
     false},
    {{61, 201, 61, 240, 29, 78, 12, 85},
     666,
     160,
     false},
    {{61, 212, 61, 195, 255, 255, 29, 86},
     668,
     161,
     false},
    {{0, 224, 255, 254, 148},
     695,
     59,
     false},
    {{255, 255, 0},
     697,
     206,
     false},
    {{148, 255, 143, 44, 134, 31, 41, 211},
     700,
     245,
     false},
    {{92, 0, 0, 0},
     850,
     73,
     false},
    {{29, 100, 0, 0, 0, 0, 0, 0},
     852,
     72,
     false},
    {{244, 198, 15, 147, 174, 63, 98, 36}, // Bremslicht
     860,
     767,
     true},
    {{0, 0, 128, 0, 0, 0},
     913,
     148,
     false},
    {{255, 255, 16, 15, 254}, //Cluster id
     951,
     274,
     false},
    {{8, 0}, // Gear Select: 8P, 16R, 32D, N24
     1015,
     237,
     true},
    {{151, 255, 255, 199, 255, 11, 79, 64},
     1063,
     823,
     false},
    {{1, 244, 0, 50, 79, 0, 224, 0},
     1066,
     700,
     false},
    {{132, 95, 208, 224, 4, 6, 64, 22},
     1070,
     330,
     false},
    {{0, 0, 0, 23, 128, 140, 163, 32},
     1072,
     706,
     false},
    {{80, 0, 2, 11, 44, 64, 0, 88},
     1074,
     208,
     false},
    {{0, 0, 127, 0},
     1075,
     2681,
     false},
    {{52, 116, 240},
     1081,
     475,
     false},
    {{68, 16, 0, 30, 194, 0, 0, 0}, //Cluster id
     1272,
     221,
     false},
    {{0, 0},
     1274,
     815,
     false},
    {{2, 64, 238, 89, 119},
     1280,
     488,
     false},
    {{0, 160, 211, 122, 169, 123, 161},
     1297,
     221,
     false},
    {{2, 52},
     1362,
     1469,
     false},
    {{46, 96},
     1379,
     248,
     false},
    {{100, 1, 3, 17, 21, 8, 1}, // Speed -//{{29, 19, 3, 107, 241, 80, 254},
     1495,
     224,
     true},
    {{60, 255, 0, 255, 255, 255, 255},
     1498,
     776,
     false},
    {{0, 0, 0, 128, 1, 0, 0, 64}, // Türverriegelung
     1502,
     289,
     true},
    {{168},
     1503,
     232,
     false},
    {{0, 56, 0, 0, 0, 24, 0, 2}, // Einparkhilfe
     1513,
     193,
     true},
    {{0, 0, 2, 6, 125, 0, 0, 148},
     1518,
     339,
     false},
    {{0, 128, 0, 0},
     1519,
     1117,
     false},
    {{0}, // Servolenkung
     1580,
     173,
     true},
    {{62, 136, 64, 0},
     1581,
     741,
     false},
    {{128, 252, 86, 0},
     1588,
     340,
     false},
    {{16, 0, 176, 0, 196, 0, 16},
     1591,
     1204,
     false},
    {{69, 31, 207, 0, 0, 0, 0},
     1592,
     879,
     false},
    {{64, 142, 0, 187, 0, 50, 30, 224}, //Cluster id
     1606,
     997,
     false},
    {{129, 149, 176, 22, 192, 2, 254, 0}, // Background color ->green
     1616,
     333,
     true},
    {{47, 15, 255, 21, 64, 5, 85, 81}, // elektrische Störung
     1618,
     277,
     true},
    {{0, 1, 88, 0}, // Airbag prüfen
     1619,
     206,
     true},
    {{0, 0, 0, 25, 255, 106, 194, 128}, // Reichweite + Battery 25% (last byte is battery warning) -//{0, 0, 0, 88, 255, 206, 194, 52},
     1620,
     2653,
     true},
    {{7, 255, 7, 254, 255, 192, 55, 0}, //Cluster id
     1622,
     342,
     false},
    {{196, 64, 84},
     1623,
     222,
     false},
    {{38, 1, 89, 98, 96, 64},
     1624,
     3000,
     false},
    {{0, 0, 0, 190, 37, 4}, // Eco mode
     1627,
     853,
     true},
    {{0, 0, 0, 3, 0, 63, 0},
     1637,
     9802,
     false},
    {{48, 0, 0, 0},
     1638,
     189,
     false},
    {{65, 6},
     1640,
     312,
     false},
    {{0, 254, 0, 0, 0, 0, 31, 0},
     1642,
     711,
     false},
    {{170, 128}, // ABS/Handbreak
     1645,
     145,
     true},
    {{192, 0},
     1649,
     1050,
     false},
    {{0, 0, 232, 227, 233, 229, 64}, //ERROR PROG
     1651,
     228,
     false},
    {{114, 0}, //Cluster ID
     1675,
     352,
     false},
    {{7, 255, 3, 10, 3, 255},
     1676,
     2220,
     false},
    {{40, 36, 9, 16, 128, 0, 9, 132},
     1689,
     2623,
     false},
    {{49, 144, 17, 143},
     1695,
     1792,
     false},
    {{76, 16, 216, 170, 255},
     1784,
     228,
     false}};

void setup() {
    Serial.begin(115200);

    while (CAN_OK != CAN.begin(CAN_500KBPS))
    { // init can bus : baudrate = 500k
        Serial.println("CAN BUS Shield init fail");
        Serial.println(" Init CAN BUS Shield again");
        delay(100);
    }
    Serial.println("CAN BUS Shield init ok!");
}

void loop() {
    for (int i = 0; i < 70; i++) {
        if (zoeCluster[i].active && (millis() % zoeCluster[i].frequency) < 10)
            CAN.sendMsgBuf(zoeCluster[i].can_id, 0, sizeof(zoeCluster[i].payload) / sizeof(*zoeCluster[i].payload), zoeCluster[i].payload);
        //non blocking code which sends each packet at a specified freq, thus some need to be send more often then others
    }
}
